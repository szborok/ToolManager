// processDaily.js
/**
 * Daily File Processing CLI
 * Handles the daily matrix files received via email
 */

const DailyFileProcessor = require("./src/services/DailyFileProcessor");
const Logger = require("./utils/Logger");

async function main() {
  console.log("🚀 Starting Daily File Processor...");

  try {
    const processor = new DailyFileProcessor();
    await processor.initialize();

    // Process command line arguments
    const args = process.argv.slice(2);
    const command = args[0] || "process";

    switch (command) {
      case "process":
        console.log("📊 Processing all new matrix files...");
        const result = await processor.processAllNewFiles();

        if (result.success) {
          console.log("\n✅ Processing completed successfully!");
          console.log(`Files processed: ${result.filesProcessed}`);
          console.log(`Tools found: ${result.totalToolsFound}`);
          console.log(`Work items created: ${result.totalWorkItems}`);
          console.log(`Processing time: ${result.processingTimeMs}ms`);

          if (result.results && result.results.length > 0) {
            console.log("\n📋 Processing Details:");
            result.results.forEach((fileResult) => {
              if (fileResult.success) {
                console.log(
                  `  ✓ ${fileResult.fileName}: ${fileResult.toolsFound} tools, ${fileResult.workItemsCreated} work items`
                );
              } else {
                console.log(`  ❌ ${fileResult.fileName}: ${fileResult.error}`);
              }
            });
          }
        } else {
          console.log("❌ Processing failed:", result.error || result.message);
        }
        break;

      case "watch":
        console.log("👀 Starting file watcher...");
        processor.startFileWatcher();
        console.log(
          "File watcher is running. Drop matrix files into filesToProcess/ folder."
        );
        console.log("Press Ctrl+C to stop watching.");

        // Keep the process running
        process.on("SIGINT", () => {
          console.log("\n👋 Stopping file watcher...");
          process.exit(0);
        });
        break;

      case "stats":
        const stats = processor.getStatistics();
        console.log("\n📊 Processing Statistics:");
        console.log(`Processed files: ${stats.processedFilesCount}`);
        console.log(`Watch folder: ${stats.watchFolder}`);
        console.log(`Archive folder: ${stats.archiveFolder}`);
        console.log(`Work tracking folder: ${stats.workTrackingFolder}`);
        console.log(
          `Currently processing: ${stats.isProcessing ? "Yes" : "No"}`
        );

        if (stats.processedFiles.length > 0) {
          console.log("\nProcessed files:");
          stats.processedFiles.forEach((file) => console.log(`  - ${file}`));
        }
        break;

      case "help":
      default:
        console.log("\n📖 Daily File Processor Commands:");
        console.log(
          "  node processDaily.js process  - Process all new matrix files"
        );
        console.log(
          "  node processDaily.js watch    - Start file watcher for automatic processing"
        );
        console.log(
          "  node processDaily.js stats    - Show processing statistics"
        );
        console.log("  node processDaily.js help     - Show this help message");
        console.log("\n📁 Workflow:");
        console.log(
          "  1. Save email attachment (Euroform_Matrix_YYYY-MM-DD.xlsx) to filesToProcess/"
        );
        console.log(
          '  2. Run "node processDaily.js process" or use file watcher'
        );
        console.log(
          "  3. Work tracking files will be created in data/workTracking/"
        );
        console.log(
          "  4. Processed files will be archived to filesProcessedArchive/"
        );
        break;
    }
  } catch (error) {
    console.error("❌ Error:", error.message);
    Logger.error(`Daily processing error: ${error.message}`);
    process.exit(1);
  }
}

// Handle uncaught exceptions
process.on("uncaughtException", (error) => {
  console.error("Uncaught Exception:", error);
  Logger.error(`Uncaught Exception: ${error.message}`);
  process.exit(1);
});

process.on("unhandledRejection", (reason, promise) => {
  console.error("Unhandled Rejection at:", promise, "reason:", reason);
  Logger.error(`Unhandled Rejection: ${reason}`);
  process.exit(1);
});

// Run the application
if (require.main === module) {
  main();
}

module.exports = { main };
